// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: activity/activity_service.proto

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ActivityService_Create_FullMethodName = "/proto.ActivityService/Create"
	ActivityService_Get_FullMethodName    = "/proto.ActivityService/Get"
	ActivityService_GetAll_FullMethodName = "/proto.ActivityService/GetAll"
	ActivityService_Update_FullMethodName = "/proto.ActivityService/Update"
	ActivityService_Delete_FullMethodName = "/proto.ActivityService/Delete"
)

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	Create(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error)
	Get(ctx context.Context, in *GetActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error)
	GetAll(ctx context.Context, in *GetAllActivityRequest, opts ...grpc.CallOption) (*GetAllActivityResponse, error)
	Update(ctx context.Context, in *UpdateActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error)
	Delete(ctx context.Context, in *DeleteActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) Create(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityBaseResponse)
	err := c.cc.Invoke(ctx, ActivityService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Get(ctx context.Context, in *GetActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityBaseResponse)
	err := c.cc.Invoke(ctx, ActivityService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetAll(ctx context.Context, in *GetAllActivityRequest, opts ...grpc.CallOption) (*GetAllActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllActivityResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Update(ctx context.Context, in *UpdateActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityBaseResponse)
	err := c.cc.Invoke(ctx, ActivityService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) Delete(ctx context.Context, in *DeleteActivityByIDRequest, opts ...grpc.CallOption) (*ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityBaseResponse)
	err := c.cc.Invoke(ctx, ActivityService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	Create(context.Context, *CreateActivityRequest) (*ActivityBaseResponse, error)
	Get(context.Context, *GetActivityByIDRequest) (*ActivityBaseResponse, error)
	GetAll(context.Context, *GetAllActivityRequest) (*GetAllActivityResponse, error)
	Update(context.Context, *UpdateActivityByIDRequest) (*ActivityBaseResponse, error)
	Delete(context.Context, *DeleteActivityByIDRequest) (*ActivityBaseResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) Create(context.Context, *CreateActivityRequest) (*ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActivityServiceServer) Get(context.Context, *GetActivityByIDRequest) (*ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActivityServiceServer) GetAll(context.Context, *GetAllActivityRequest) (*GetAllActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActivityServiceServer) Update(context.Context, *UpdateActivityByIDRequest) (*ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActivityServiceServer) Delete(context.Context, *DeleteActivityByIDRequest) (*ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Create(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Get(ctx, req.(*GetActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetAll(ctx, req.(*GetAllActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Update(ctx, req.(*UpdateActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Delete(ctx, req.(*DeleteActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActivityService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ActivityService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ActivityService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActivityService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActivityService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/activity_service.proto",
}
