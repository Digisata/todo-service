// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: invitation-label/invitation_label_service.proto

package invitation_label

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InvitationLabelService_CreateInvitationLabel_FullMethodName         = "/proto.InvitationLabelService/CreateInvitationLabel"
	InvitationLabelService_GetInvitationLabel_FullMethodName            = "/proto.InvitationLabelService/GetInvitationLabel"
	InvitationLabelService_GetAllInvitationLabelByUserID_FullMethodName = "/proto.InvitationLabelService/GetAllInvitationLabelByUserID"
	InvitationLabelService_UpdateInvitationLabel_FullMethodName         = "/proto.InvitationLabelService/UpdateInvitationLabel"
	InvitationLabelService_DeleteInvitationLabel_FullMethodName         = "/proto.InvitationLabelService/DeleteInvitationLabel"
)

// InvitationLabelServiceClient is the client API for InvitationLabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationLabelServiceClient interface {
	CreateInvitationLabel(ctx context.Context, in *CreateInvitationLabelRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error)
	GetInvitationLabel(ctx context.Context, in *GetInvitationLabelByIDRequest, opts ...grpc.CallOption) (*GetInvitationLabelByIDResponse, error)
	GetAllInvitationLabelByUserID(ctx context.Context, in *GetAllInvitationLabelByUserIDRequest, opts ...grpc.CallOption) (*GetAllInvitationLabelByUserIDResponse, error)
	UpdateInvitationLabel(ctx context.Context, in *UpdateInvitationLabelByIDRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error)
	DeleteInvitationLabel(ctx context.Context, in *DeleteInvitationLabelByIDRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error)
}

type invitationLabelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationLabelServiceClient(cc grpc.ClientConnInterface) InvitationLabelServiceClient {
	return &invitationLabelServiceClient{cc}
}

func (c *invitationLabelServiceClient) CreateInvitationLabel(ctx context.Context, in *CreateInvitationLabelRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationLabelBaseResponse)
	err := c.cc.Invoke(ctx, InvitationLabelService_CreateInvitationLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationLabelServiceClient) GetInvitationLabel(ctx context.Context, in *GetInvitationLabelByIDRequest, opts ...grpc.CallOption) (*GetInvitationLabelByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationLabelByIDResponse)
	err := c.cc.Invoke(ctx, InvitationLabelService_GetInvitationLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationLabelServiceClient) GetAllInvitationLabelByUserID(ctx context.Context, in *GetAllInvitationLabelByUserIDRequest, opts ...grpc.CallOption) (*GetAllInvitationLabelByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllInvitationLabelByUserIDResponse)
	err := c.cc.Invoke(ctx, InvitationLabelService_GetAllInvitationLabelByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationLabelServiceClient) UpdateInvitationLabel(ctx context.Context, in *UpdateInvitationLabelByIDRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationLabelBaseResponse)
	err := c.cc.Invoke(ctx, InvitationLabelService_UpdateInvitationLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationLabelServiceClient) DeleteInvitationLabel(ctx context.Context, in *DeleteInvitationLabelByIDRequest, opts ...grpc.CallOption) (*InvitationLabelBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationLabelBaseResponse)
	err := c.cc.Invoke(ctx, InvitationLabelService_DeleteInvitationLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationLabelServiceServer is the server API for InvitationLabelService service.
// All implementations must embed UnimplementedInvitationLabelServiceServer
// for forward compatibility
type InvitationLabelServiceServer interface {
	CreateInvitationLabel(context.Context, *CreateInvitationLabelRequest) (*InvitationLabelBaseResponse, error)
	GetInvitationLabel(context.Context, *GetInvitationLabelByIDRequest) (*GetInvitationLabelByIDResponse, error)
	GetAllInvitationLabelByUserID(context.Context, *GetAllInvitationLabelByUserIDRequest) (*GetAllInvitationLabelByUserIDResponse, error)
	UpdateInvitationLabel(context.Context, *UpdateInvitationLabelByIDRequest) (*InvitationLabelBaseResponse, error)
	DeleteInvitationLabel(context.Context, *DeleteInvitationLabelByIDRequest) (*InvitationLabelBaseResponse, error)
	mustEmbedUnimplementedInvitationLabelServiceServer()
}

// UnimplementedInvitationLabelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationLabelServiceServer struct {
}

func (UnimplementedInvitationLabelServiceServer) CreateInvitationLabel(context.Context, *CreateInvitationLabelRequest) (*InvitationLabelBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitationLabel not implemented")
}
func (UnimplementedInvitationLabelServiceServer) GetInvitationLabel(context.Context, *GetInvitationLabelByIDRequest) (*GetInvitationLabelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationLabel not implemented")
}
func (UnimplementedInvitationLabelServiceServer) GetAllInvitationLabelByUserID(context.Context, *GetAllInvitationLabelByUserIDRequest) (*GetAllInvitationLabelByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvitationLabelByUserID not implemented")
}
func (UnimplementedInvitationLabelServiceServer) UpdateInvitationLabel(context.Context, *UpdateInvitationLabelByIDRequest) (*InvitationLabelBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitationLabel not implemented")
}
func (UnimplementedInvitationLabelServiceServer) DeleteInvitationLabel(context.Context, *DeleteInvitationLabelByIDRequest) (*InvitationLabelBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitationLabel not implemented")
}
func (UnimplementedInvitationLabelServiceServer) mustEmbedUnimplementedInvitationLabelServiceServer() {
}

// UnsafeInvitationLabelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationLabelServiceServer will
// result in compilation errors.
type UnsafeInvitationLabelServiceServer interface {
	mustEmbedUnimplementedInvitationLabelServiceServer()
}

func RegisterInvitationLabelServiceServer(s grpc.ServiceRegistrar, srv InvitationLabelServiceServer) {
	s.RegisterService(&InvitationLabelService_ServiceDesc, srv)
}

func _InvitationLabelService_CreateInvitationLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationLabelServiceServer).CreateInvitationLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationLabelService_CreateInvitationLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationLabelServiceServer).CreateInvitationLabel(ctx, req.(*CreateInvitationLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationLabelService_GetInvitationLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationLabelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationLabelServiceServer).GetInvitationLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationLabelService_GetInvitationLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationLabelServiceServer).GetInvitationLabel(ctx, req.(*GetInvitationLabelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationLabelService_GetAllInvitationLabelByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInvitationLabelByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationLabelServiceServer).GetAllInvitationLabelByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationLabelService_GetAllInvitationLabelByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationLabelServiceServer).GetAllInvitationLabelByUserID(ctx, req.(*GetAllInvitationLabelByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationLabelService_UpdateInvitationLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationLabelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationLabelServiceServer).UpdateInvitationLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationLabelService_UpdateInvitationLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationLabelServiceServer).UpdateInvitationLabel(ctx, req.(*UpdateInvitationLabelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationLabelService_DeleteInvitationLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationLabelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationLabelServiceServer).DeleteInvitationLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationLabelService_DeleteInvitationLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationLabelServiceServer).DeleteInvitationLabel(ctx, req.(*DeleteInvitationLabelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationLabelService_ServiceDesc is the grpc.ServiceDesc for InvitationLabelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationLabelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InvitationLabelService",
	HandlerType: (*InvitationLabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvitationLabel",
			Handler:    _InvitationLabelService_CreateInvitationLabel_Handler,
		},
		{
			MethodName: "GetInvitationLabel",
			Handler:    _InvitationLabelService_GetInvitationLabel_Handler,
		},
		{
			MethodName: "GetAllInvitationLabelByUserID",
			Handler:    _InvitationLabelService_GetAllInvitationLabelByUserID_Handler,
		},
		{
			MethodName: "UpdateInvitationLabel",
			Handler:    _InvitationLabelService_UpdateInvitationLabel_Handler,
		},
		{
			MethodName: "DeleteInvitationLabel",
			Handler:    _InvitationLabelService_DeleteInvitationLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invitation-label/invitation_label_service.proto",
}
