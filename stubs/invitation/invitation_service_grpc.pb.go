// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: invitation/invitation_service.proto

package invitation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InvitationService_Create_FullMethodName         = "/proto.InvitationService/Create"
	InvitationService_Get_FullMethodName            = "/proto.InvitationService/Get"
	InvitationService_GetAllByUserID_FullMethodName = "/proto.InvitationService/GetAllByUserID"
	InvitationService_Update_FullMethodName         = "/proto.InvitationService/Update"
	InvitationService_Delete_FullMethodName         = "/proto.InvitationService/Delete"
	InvitationService_GetLink_FullMethodName        = "/proto.InvitationService/GetLink"
	InvitationService_Verify_FullMethodName         = "/proto.InvitationService/Verify"
)

// InvitationServiceClient is the client API for InvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationServiceClient interface {
	Create(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error)
	Get(ctx context.Context, in *GetInvitationByIDRequest, opts ...grpc.CallOption) (*GetInvitationByIDResponse, error)
	GetAllByUserID(ctx context.Context, in *GetAllInvitationByUserIDRequest, opts ...grpc.CallOption) (*GetAllInvitationByUserIDResponse, error)
	Update(ctx context.Context, in *UpdateInvitationByIDRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error)
	Delete(ctx context.Context, in *DeleteInvitationByIDRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error)
	GetLink(ctx context.Context, in *GetInvitationLinkByIDRequest, opts ...grpc.CallOption) (*GetInvitationLinkByIDResponse, error)
	Verify(ctx context.Context, in *VerifyInvitationRequest, opts ...grpc.CallOption) (*VerifyInvitationResponse, error)
}

type invitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationServiceClient(cc grpc.ClientConnInterface) InvitationServiceClient {
	return &invitationServiceClient{cc}
}

func (c *invitationServiceClient) Create(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationBaseResponse)
	err := c.cc.Invoke(ctx, InvitationService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Get(ctx context.Context, in *GetInvitationByIDRequest, opts ...grpc.CallOption) (*GetInvitationByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationByIDResponse)
	err := c.cc.Invoke(ctx, InvitationService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) GetAllByUserID(ctx context.Context, in *GetAllInvitationByUserIDRequest, opts ...grpc.CallOption) (*GetAllInvitationByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllInvitationByUserIDResponse)
	err := c.cc.Invoke(ctx, InvitationService_GetAllByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Update(ctx context.Context, in *UpdateInvitationByIDRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationBaseResponse)
	err := c.cc.Invoke(ctx, InvitationService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Delete(ctx context.Context, in *DeleteInvitationByIDRequest, opts ...grpc.CallOption) (*InvitationBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitationBaseResponse)
	err := c.cc.Invoke(ctx, InvitationService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) GetLink(ctx context.Context, in *GetInvitationLinkByIDRequest, opts ...grpc.CallOption) (*GetInvitationLinkByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationLinkByIDResponse)
	err := c.cc.Invoke(ctx, InvitationService_GetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Verify(ctx context.Context, in *VerifyInvitationRequest, opts ...grpc.CallOption) (*VerifyInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyInvitationResponse)
	err := c.cc.Invoke(ctx, InvitationService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationServiceServer is the server API for InvitationService service.
// All implementations must embed UnimplementedInvitationServiceServer
// for forward compatibility
type InvitationServiceServer interface {
	Create(context.Context, *CreateInvitationRequest) (*InvitationBaseResponse, error)
	Get(context.Context, *GetInvitationByIDRequest) (*GetInvitationByIDResponse, error)
	GetAllByUserID(context.Context, *GetAllInvitationByUserIDRequest) (*GetAllInvitationByUserIDResponse, error)
	Update(context.Context, *UpdateInvitationByIDRequest) (*InvitationBaseResponse, error)
	Delete(context.Context, *DeleteInvitationByIDRequest) (*InvitationBaseResponse, error)
	GetLink(context.Context, *GetInvitationLinkByIDRequest) (*GetInvitationLinkByIDResponse, error)
	Verify(context.Context, *VerifyInvitationRequest) (*VerifyInvitationResponse, error)
	mustEmbedUnimplementedInvitationServiceServer()
}

// UnimplementedInvitationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationServiceServer struct {
}

func (UnimplementedInvitationServiceServer) Create(context.Context, *CreateInvitationRequest) (*InvitationBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInvitationServiceServer) Get(context.Context, *GetInvitationByIDRequest) (*GetInvitationByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInvitationServiceServer) GetAllByUserID(context.Context, *GetAllInvitationByUserIDRequest) (*GetAllInvitationByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserID not implemented")
}
func (UnimplementedInvitationServiceServer) Update(context.Context, *UpdateInvitationByIDRequest) (*InvitationBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInvitationServiceServer) Delete(context.Context, *DeleteInvitationByIDRequest) (*InvitationBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInvitationServiceServer) GetLink(context.Context, *GetInvitationLinkByIDRequest) (*GetInvitationLinkByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedInvitationServiceServer) Verify(context.Context, *VerifyInvitationRequest) (*VerifyInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedInvitationServiceServer) mustEmbedUnimplementedInvitationServiceServer() {}

// UnsafeInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationServiceServer will
// result in compilation errors.
type UnsafeInvitationServiceServer interface {
	mustEmbedUnimplementedInvitationServiceServer()
}

func RegisterInvitationServiceServer(s grpc.ServiceRegistrar, srv InvitationServiceServer) {
	s.RegisterService(&InvitationService_ServiceDesc, srv)
}

func _InvitationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Create(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Get(ctx, req.(*GetInvitationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_GetAllByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInvitationByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).GetAllByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_GetAllByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).GetAllByUserID(ctx, req.(*GetAllInvitationByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Update(ctx, req.(*UpdateInvitationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Delete(ctx, req.(*DeleteInvitationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationLinkByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).GetLink(ctx, req.(*GetInvitationLinkByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Verify(ctx, req.(*VerifyInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationService_ServiceDesc is the grpc.ServiceDesc for InvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InvitationService",
	HandlerType: (*InvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InvitationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InvitationService_Get_Handler,
		},
		{
			MethodName: "GetAllByUserID",
			Handler:    _InvitationService_GetAllByUserID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InvitationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InvitationService_Delete_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _InvitationService_GetLink_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _InvitationService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invitation/invitation_service.proto",
}
